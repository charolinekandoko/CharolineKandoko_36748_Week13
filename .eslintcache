[{"D:\\college\\semester 3\\intro to internet technology\\praktikum\\quiz\\countdown\\src\\App.js":"1","D:\\college\\semester 3\\intro to internet technology\\praktikum\\quiz\\countdown\\src\\reportWebVitals.js":"2"},{"size":4376,"mtime":1606741265749,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1na0eba",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\college\\semester 3\\intro to internet technology\\praktikum\\quiz\\countdown\\src\\App.js",["11","12","13","14","15","16","17","18"],"import logo from './logo.svg';\nimport './App.css';\nimport up from './up.jpg';\nimport down from './down.jpg';\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const [started, setStarted] = useState(false);\n  const [showBoom, setShowBoom] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const { hours, minutes, seconds } = time;\n  let interval;\n  useEffect(() => {\n    if (started) {\n      interval = setInterval(() => {\n        //console.log(\"test\");\n        if (seconds > 0) {\n          setTime({\n            ...time,\n            seconds: seconds - 1,\n          });\n        }\n        if (seconds === 0) {\n          if (minutes === 0) {\n            if (hours === 0) {\n              clearInterval(interval);\n              setStarted(false);\n              setShowBoom(true);\n            } else {\n              setTime({\n                ...time,\n                hours: hours - 1,\n                minutes: 59,\n                seconds: 59,\n              });\n            }\n          } else {\n            setTime({\n              ...time,\n              minutes: minutes - 1,\n              seconds: 59,\n            });\n          }\n        }\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  }, [time, started]);\n\n  const startCountdown = () => {\n    if (hours === 0 && minutes === 0 && seconds === 0) {\n      return;\n    }\n\n    setStarted(true);\n    setPaused(false);\n  };\n\n  const resetCountodown = () => {\n    setStarted(false);\n    setTime({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    });\n  };\n\n  const handleChange = (type, waktu) => {\n    setShowBoom(false);\n    if (type === \"increment\" && waktu === \"h\") {\n      if (hours + 1 > 24) {\n        return;\n      }\n      setTime({ ...time, hours: hours + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"h\") {\n      if (hours - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, hours: hours - 1 });\n    }\n\n    if (type === \"increment\" && waktu === \"m\") {\n      if (minutes + 1 > 59) {\n        return;\n      }\n      setTime({ ...time, minutes: minutes + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"m\") {\n      if (minutes - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, minutes: minutes - 1 });\n    }\n\n    if (type === \"increment\" && waktu === \"s\") {\n      if (seconds + 1 > 59) {\n        return;\n      }\n      setTime({ ...time, seconds: seconds + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"s\") {\n      if (seconds - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, seconds: seconds - 1 });\n    }\n  };\n\n  const pauseCountdown = () => {\n    clearInterval(interval);\n    setPaused(true);\n    if (started) {\n      setStarted(false);\n    } else {\n      setStarted(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className =\"Title\">\n          SIMPLE COUNTDOWN \n        </p>\n        <div className =\"time\">\n        <div style={{ textAlign: \"center\" }}>\n        <div>{showBoom && \"!DONE!\"}</div>\n        <div>{started && !showBoom && \"Remaining:\"}</div>\n        <div>\n          {hours} : {minutes}: {seconds}\n        </div>\n        </div>\n        </div>\n        \n        \n        <img src = {up} className=\"arrowUp1\" onClick={(e) => handleChange(\"increment\", \"h\")}></img>\n        \n      \n        <img src = {down} className=\"arrowDown1\"onClick={(e) => handleChange(\"decrement\", \"h\")}></img> \n        \n        \n        <img src = {up} className=\"arrowUp2\"onClick={(e) => handleChange(\"increment\", \"m\")}></img>\n        \n      \n        <img src = {down} className=\"arrowDown2\" onClick={(e) => handleChange(\"decrement\", \"m\")}></img>\n      \n      \n        <img src = {up} className=\"arrowUp3\" onClick={(e) => handleChange(\"increment\", \"s\")}></img>\n        \n      \n        <img src = {down} className=\"arrowDown3\" onClick={(e) => handleChange(\"decrement\", \"s\")}></img>\n        \n        <div>\n        <button onClick={startCountdown}>\n            {paused ? \"Resume\" : \"Start\"}\n          </button>\n          <button onClick={resetCountodown}> Reset</button>\n          {started && <button onClick={pauseCountdown}> Pause</button>}\n       \n        </div>\n      \n      <p clasName =\"nama\">Charoline Kandoko - 36748</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","D:\\college\\semester 3\\intro to internet technology\\praktikum\\quiz\\countdown\\src\\reportWebVitals.js",[],{"ruleId":"19","severity":1,"message":"20","line":1,"column":8,"nodeType":"21","messageId":"22","endLine":1,"endColumn":12},{"ruleId":"23","severity":1,"message":"24","line":21,"column":18,"nodeType":"25","endLine":51,"endColumn":15},{"ruleId":"26","severity":1,"message":"27","line":147,"column":9,"nodeType":"28","endLine":147,"endColumn":94},{"ruleId":"26","severity":1,"message":"27","line":150,"column":9,"nodeType":"28","endLine":150,"endColumn":97},{"ruleId":"26","severity":1,"message":"27","line":153,"column":9,"nodeType":"28","endLine":153,"endColumn":93},{"ruleId":"26","severity":1,"message":"27","line":156,"column":9,"nodeType":"28","endLine":156,"endColumn":98},{"ruleId":"26","severity":1,"message":"27","line":159,"column":9,"nodeType":"28","endLine":159,"endColumn":94},{"ruleId":"26","severity":1,"message":"27","line":162,"column":9,"nodeType":"28","endLine":162,"endColumn":98},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]